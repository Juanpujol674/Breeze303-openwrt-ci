name: ipq60xx-6.12-M2_Nowifi

on:
  workflow_dispatch:
  schedule:
    #- cron: "0 18 * * *"  # UTC时间18:00（北京时间凌晨2点）

env:
  TERM: dumb  # 关键修复
  REPO_URL: https://github.com/LiBwrt/openwrt-6.x.git
  REPO_BRANCH: kernel-6.12
  CONFIG_FILE: configs/ipq60xx-6.12-M2_Nowifi.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: ipq60xx-6.12-M2_Nowifi
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04
    env:
      TERM: dumb  # 覆盖全局确保生效
      
    steps:
      - name: Check Server Performance
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) || true
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY || true
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y update
          sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
          libev-dev \         # 新增
          libpam0g-dev \      # 新增
          liblzma-dev \       # 新增
          libsnmp-dev         # 新增
          sudo -E apt-get -y install libncurses-dev ncurses-term
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get -y clean
          sudo timedatectl set-timezone "$TZ"

      - name: Combine Disks
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 1024
          temp-reserve-mb: 100
          root-reserve-mb: 1024

      - name: Checkout
        uses: actions/checkout@main

      - name: Clone Source Code
        run: |
          echo "▼▼▼▼▼ 工作区路径验证 ▼▼▼▼▼"
          df -hT "$GITHUB_WORKSPACE"
          ls -la "$GITHUB_WORKSPACE"

          echo "▼▼▼▼▼ 开始克隆仓库 ▼▼▼▼▼"
          if ! git clone --depth 1 -b "$REPO_BRANCH" "$REPO_URL" openwrt; then
            echo "::error::仓库克隆失败！URL: $REPO_URL 分支: $REPO_BRANCH"
            exit 1
          fi

          cd "openwrt" || (echo "::error::进入目录失败" && exit 1)
          
          # 删除可能引入额外插件的第三方包
          rm -rf feeds/small8/luci-app-dockerman
          rm -rf feeds/small8/luci-app-netspeedtest
          rm -rf feeds/luci/applications/luci-app-samba4

          VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' include/kernel-6.12)
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV

      - name: Clean Previous Build
        if: env.CACHE_TOOLCHAIN == 'true'
        run: |
          cd "$OPENWRT_PATH"
          make clean
          rm -rf tmp/ .config.old feeds/

      - name: Generate Variables
        run: |
          cp "$CONFIG_FILE" "$OPENWRT_PATH/.config"
          cd "$OPENWRT_PATH" || exit 1
          export TERM=dumb
          make defconfig > /dev/null 2>&1
          SOURCE_REPO="$(echo "$REPO_URL" | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          DEVICE_TARGET=$(grep 'CONFIG_TARGET_BOARD=' .config | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          DEVICE_SUBTARGET=$(grep 'CONFIG_TARGET_SUBTARGET=' .config | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

      - name: Cache Toolchain
        if: env.CACHE_TOOLCHAIN == 'true'
        uses: HiGarfield/cachewrtbuild@main
        with:
          ccache: false
          mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FIRMWARE_TAG }}
          prefix: ${{ env.OPENWRT_PATH }}

      - name: Install Feeds
        run: |
          cd "$OPENWRT_PATH" || exit 1
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          cd "$OPENWRT_PATH" || exit 1
          export TERM=dumb  # 显式覆盖
          cp -f "$GITHUB_WORKSPACE/$CONFIG_FILE" .config
          make defconfig

          # 强制覆盖并验证配置
          echo "应用自定义配置..."
          cp -f "$GITHUB_WORKSPACE/$CONFIG_FILE" .config
          make defconfig

          # 严格验证插件禁用状态
          forbidden_plugins=(
            "luci-app-dockerman"
            "luci-app-netspeedtest"
            "luci-app-samba4"
          )
          for plugin in "${forbidden_plugins[@]}"; do
            if grep "CONFIG_PACKAGE_${plugin}=y" .config; then
              echo "::error::检测到被禁用的插件 ${plugin} 仍被启用！"
              exit 1
            fi
          done

          # 验证必要配置
          grep "CONFIG_TARGET_DEVICE_qualcommax_ipq60xx_DEVICE_zn_m2" .config || (echo "::error::设备配置丢失！" && exit 1)
          grep "CONFIG_PACKAGE_luci-app-mihomo=y" .config || (echo "::error::Mihomo插件未启用！" && exit 1)

      - name: Download DL Package
        run: |
          cd $OPENWRT_PATH
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Firmware
        id: compile
        run: |
          cd $OPENWRT_PATH
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          if [ $? -ne 0 ]; then
            echo "编译失败，请检查日志！"
            exit 1
          fi
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          # 动态生成时间戳
          echo "FILE_DATE=$(date +"%Y%m%d-%H%M%S")" >> $GITHUB_ENV

      - name: Check Space Usage
        if: (!cancelled())
        run: df -hT

      - name: Organize Files
        if: steps.compile.outputs.status == 'success'
        run: |
          cd $OPENWRT_PATH/bin/targets/*/*
          cp $OPENWRT_PATH/.config build.config
          mkdir -p packages
          if ls $OPENWRT_PATH/bin/packages/*/*/*.apk > /dev/null 2>&1; then
            mv -f $OPENWRT_PATH/bin/packages/*/*/*.apk packages
          fi
          tar -zcf Packages.tar.gz packages
          rm -rf packages feeds.buildinfo version.buildinfo
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

      - name: Upload Firmware To Artifact
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}

      - name: Upload Firmware To Release
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: softprops/action-gh-release@v2
        with:
            name: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
            tag_name: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
            files: ${{ env.FIRMWARE_PATH }}/*
            body: |
              **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
              ### 📒 固件信息(无WIFI)
              - 无WIFI带有线NSS的6.12内核固件
              - 💻 这是 ${{ env.FIRMWARE_TAG }} 平台使用的 无WIFI无USB OpenWrt 固件
              - ⚽ 固件源码: ${{ env.REPO_URL }}
              - 💝 源码分支: ${{ env.REPO_BRANCH }}
              - 🌐 默认地址: 192.168.1.1
              - 🔑 默认密码: password
              ### 🧊 固件版本
              - 固件内核版本：${{ env.VERSION_KERNEL }}
              - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
              - ${{ env.VERSION_INFO }}
            token: ${{ secrets.GITHUB_TOKEN }}
            replace: false  # 不允许覆盖已有Release
            draft: false    # 直接发布，非草稿
            prerelease: false # 非预发布版本
