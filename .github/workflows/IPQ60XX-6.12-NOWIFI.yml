name: IPQ60XX-6.12-NOWIFI

on:
  workflow_dispatch:
  schedule:
    - cron: "0 18 * * *"  # UTC时间18:00（北京时间凌晨2点）

jobs:
  Build:
    runs-on: ubuntu-22.04
    env:
      REPO_URL: https://github.com/LiBwrt/openwrt-6.x.git
      REPO_BRANCH: kernel-6.12
      CONFIG_FILE: configs/ipq60xx-6.12-nowifi.config
      DIY_SCRIPT: diy-script.sh
      CLASH_KERNEL: amd64
      CACHE_TOOLCHAIN: true
      UPLOAD_BIN_DIR: false
      FIRMWARE_RELEASE: true
      FIRMWARE_TAG: IPQ60XX-6.12-NOWIFI
      TZ: Asia/Shanghai

    steps:
      - name: Check Server Performance(检查服务器性能)
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: Initialization Environment(初始化环境)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) || true
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY || true
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y update
          sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get -y clean
          sudo timedatectl set-timezone "$TZ"

      - name: Combine Disks(合并磁盘)
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 1024
          temp-reserve-mb: 100
          root-reserve-mb: 1024

      - name: Checkout
        uses: actions/checkout@v4  # 修改为稳定版本号

- name: Clone Source Code(克隆源代码)
  env:
    REPO_BRANCH: ${{ env.REPO_BRANCH }}
    REPO_URL: ${{ env.REPO_URL }}
  run: |
    # ======================
    # 预检验证
    # ======================
    echo "▼▼▼▼▼ 环境变量验证 ▼▼▼▼▼"
    echo "工作区路径: $GITHUB_WORKSPACE"
    echo "REPO_BRANCH: '$REPO_BRANCH'"
    echo "REPO_URL: '$REPO_URL'"

    # ======================
    # 变量空值检查
    # ======================
    if [ -z "$REPO_BRANCH" ]; then
      echo "::error::REPO_BRANCH 未定义或为空值！"
      echo "可用环境变量:"
      printenv | grep -E 'REPO_|GITHUB'
      exit 1
    fi

    if [ -z "$REPO_URL" ]; then
      echo "::error::REPO_URL 未定义或为空值！"
      exit 1
    fi

    # ======================
    # 分支存在性验证
    # ======================
    echo "▼▼▼▼▼ 远程分支验证 ▼▼▼▼▼"
    if ! git ls-remote --exit-code --heads "$REPO_URL" "$REPO_BRANCH"; then
      echo "::error::分支 $REPO_BRANCH 不存在！可用分支列表："
      git ls-remote --heads "$REPO_URL" | awk -F'/' '{print $3}' | sort -u
      exit 1
    fi

    # ======================
    # 核心克隆操作
    # ======================
    echo "▼▼▼▼▼ 开始克隆仓库 ▼▼▼▼▼"
    echo "执行命令：git clone --depth 1 -b '$REPO_BRANCH' '$REPO_URL' openwrt"
    
    if ! git clone --progress --depth 1 -b "${REPO_BRANCH}" "${REPO_URL}" openwrt; then
      echo "::error::克隆操作失败！错误代码：$?"
      echo "调试信息："
      echo "仓库协议验证：$(echo "$REPO_URL" | awk -F':' '{print $1}')"
      echo "分支格式验证：$(echo "$REPO_BRANCH" | tr -d '[:space:]')"
      exit 1
    fi

    # ======================
    # 后置验证
    # ======================
    echo "▼▼▼▼▼ 仓库完整性检查 ▼▼▼▼▼"
    if [ ! -d "openwrt" ]; then
      echo "::error::目标目录未创建！当前目录内容："
      ls -la
      exit 1
    fi

    cd openwrt || {
      echo "::error::无法进入openwrt目录！当前路径：$PWD"
      exit 1
    }

    echo "▼▼▼▼▼ 仓库元数据验证 ▼▼▼▼▼"
    echo "当前路径：$PWD"
    echo "目录大小：$(du -sh .)"
    echo "分支验证："
    git branch -a

    # ======================
    # 内核版本提取
    # ======================
    echo "▼▼▼▼▼ 内核版本信息 ▼▼▼▼▼"
    if [ ! -f "include/kernel-6.12" ]; then
      echo "::warning::内核版本文件缺失！"
      VERSION_KERNEL="unknown"
    else
      VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[\d.]+' include/kernel-6.12 || echo "parse_error")
      if [ "$VERSION_KERNEL" = "parse_error" ]; then
        echo "::warning::内核版本解析失败！文件内容："
        cat include/kernel-6.12
        VERSION_KERNEL="invalid"
      fi
    fi

    # ======================
    # 环境变量导出
    # ======================
    echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
    echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV
    echo "✅ 环境变量已设置："
    echo "OPENWRT_PATH=$PWD"
    echo "VERSION_KERNEL=$VERSION_KERNEL"

      - name: Generate Variables(生成变量)
        run: |
          cp "$CONFIG_FILE" "$OPENWRT_PATH/.config"
          cd "$OPENWRT_PATH" || exit 1
          make defconfig > /dev/null 2>&1
          SOURCE_REPO="$(echo "$REPO_URL" | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          DEVICE_TARGET=$(grep 'CONFIG_TARGET_BOARD=' .config | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          DEVICE_SUBTARGET=$(grep 'CONFIG_TARGET_SUBTARGET=' .config | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

      - name: Cache Toolchain(缓存工具链)
        if: env.CACHE_TOOLCHAIN == 'true'
        uses: HiGarfield/cachewrtbuild@main
        with:
          ccache: false
          mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          prefix: ${{ env.OPENWRT_PATH }}

      - name: Install Feeds(安装feeds)
        run: |
          cd "$OPENWRT_PATH" || exit 1
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load Custom Configuration(加载自定义配置)
        run: |
          [ -e files ] && mv files "$OPENWRT_PATH/files"
          [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" "$OPENWRT_PATH/.config"
          chmod +x "$DIY_SCRIPT"
          cd "$OPENWRT_PATH" || exit 1
          bash "$GITHUB_WORKSPACE/$DIY_SCRIPT"

      - name: Download DL Package(下载DL软件包)
        run: |
          cd $OPENWRT_PATH
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Firmware(开始编译固件)
        id: compile
        run: |
          cd $OPENWRT_PATH
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          if [ $? -ne 0 ]; then
            echo "编译失败，请检查日志！"
            exit 1
          fi
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

      - name: Check Space Usage(检查空间使用情况)
        if: (!cancelled())
        run: df -hT

      - name: Organize Files(整理文件)
        if: steps.compile.outputs.status == 'success'
        run: |
          cd $OPENWRT_PATH/bin/targets/*/*
          echo "Current directory:"
          ls -R
          cp $OPENWRT_PATH/.config build.config
          mkdir -p packages
          if ls $OPENWRT_PATH/bin/packages/*/*/*.apk > /dev/null 2>&1; then
            mv -f $OPENWRT_PATH/bin/packages/*/*/*.apk packages
          else
            echo "No .apk files found in packages directory."
          fi
          tar -zcf Packages.tar.gz packages
          rm -rf packages feeds.buildinfo version.buildinfo
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

      - name: Upload Firmware To Artifact(将固件上传到Artifact)
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}

      - name: Upload Firmware To Release(发布固件)
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: ncipollo/release-action@v1
        with:
          name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
          allowUpdates: false
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
            ### 📒 固件信息(无WIFI)
            - 无WIFI带有线NSS的6.12内核固件
            - 💻 这是 ${{ env.FIRMWARE_TAG }} 平台使用的 OpenWrt 固件
            - ⚽ 固件源码: ${{ env.REPO_URL }}
            - 💝 源码分支: ${{ env.REPO_BRANCH }}
            - 🌐 默认地址: 192.168.1.1
            - 🔑 默认密码: password
            ### 🧊 固件版本
            - 固件内核版本：${{ env.VERSION_KERNEL }}
            - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
            - ${{ env.VERSION_INFO }}
