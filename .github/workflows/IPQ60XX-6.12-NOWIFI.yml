name: IPQ60XX-6.12-NOWIFI

on:
  workflow_dispatch:
  schedule:
    - cron: "0 18 * * *"  # UTC时间18:00（北京时间凌晨2点）

jobs:
  Build:
    runs-on: ubuntu-22.04
    env:
      REPO_URL: https://github.com/LiBwrt/openwrt-6.x.git
      REPO_BRANCH: kernel-6.12
      CONFIG_FILE: configs/ipq60xx-6.12-nowifi.config
      DIY_SCRIPT: diy-script.sh
      CLASH_KERNEL: amd64
      CACHE_TOOLCHAIN: true
      UPLOAD_BIN_DIR: false
      FIRMWARE_RELEASE: true
      FIRMWARE_TAG: IPQ60XX-6.12-NOWIFI
      TZ: Asia/Shanghai

    steps:
      - name: Check Server Performance(检查服务器性能)
        run: |
          echo "::group::🖥️ 服务器性能检查"
          echo "警告：分配的服务器资源可能受限，建议控制插件数量！"
          echo "CPU型号：$(lscpu | grep 'Model name' | cut -d: -f2 | sed 's/^ *//')"
          echo "CPU核心数：$(nproc)"
          echo "内存总量：$(free -h | awk '/Mem/{print $2}')"
          echo "存储空间："
          df -hT
          echo "::endgroup::"

      - name: Initialization Environment(初始化环境)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "::group::🧹 环境初始化"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d/* || true
          sudo apt-get -qq update
          sudo apt-get -qq install $(curl -fsSL is.gd/depends_ubuntu_2204)
          sudo timedatectl set-timezone "$TZ"
          echo "::endgroup::"

      - name: Combine Disks(合并磁盘)
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 1024
          root-reserve-mb: 1024

      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone Source Code(克隆源代码)
        env:
          REPO_BRANCH: ${{ env.REPO_BRANCH }}
          REPO_URL: ${{ env.REPO_URL }}
        run: |
          echo "::group::📥 克隆源代码"
          # 严格变量检查
          echo "▼▼▼ 环境验证 ▼▼▼"
          echo "分支: '$REPO_BRANCH'"
          echo "仓库: '$REPO_URL'"

          # 分支存在性验证
          if ! git ls-remote --exit-code --heads "$REPO_URL" "$REPO_BRANCH"; then
            echo "::error::分支 $REPO_BRANCH 不存在！"
            git ls-remote --heads "$REPO_URL" | awk -F'/' '{print $3}'
            exit 1
          fi

          # 执行克隆
          set -x
          git clone --progress --depth 1 -b "${REPO_BRANCH}" "${REPO_URL}" openwrt
          set +x

          # 仓库验证
          echo "▼▼▼ 仓库信息 ▼▼▼"
          cd openwrt
          echo "最新提交：$(git log -1 --pretty='%h - %s')"
          echo "OPENWRT_PATH=$(pwd)" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: Generate Variables(生成变量)
        run: |
          echo "::group::⚙️ 应用配置文件"
          cp -v "$CONFIG_FILE" "$OPENWRT_PATH/.config"
          cd "$OPENWRT_PATH" && make defconfig
          
          echo "DEVICE_TARGET=$(awk -F'"' '/CONFIG_TARGET_BOARD/{print $2}' .config)" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$(awk -F'"' '/CONFIG_TARGET_SUBTARGET/{print $2}' .config)" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: Cache Toolchain(缓存工具链)
        if: env.CACHE_TOOLCHAIN == 'true'
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.OPENWRT_PATH }}/dl
            ${{ env.OPENWRT_PATH }}/build_dir
          key: ${{ runner.os }}-${{ env.DEVICE_TARGET }}-${{ hashFiles('${{ env.OPENWRT_PATH }}/.config') }}

      - name: Install Feeds(安装feeds)
        run: |
          echo "::group::📦 安装软件源"
          cd "$OPENWRT_PATH"
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          echo "::endgroup::"

      - name: Load Custom Configuration(加载自定义配置)
        run: |
    # ======================
    # 迁移自定义文件
    # ======================
        echo "::group::📁 迁移自定义文件"
        if [ -d "files" ]; then
          echo "检测到自定义文件目录，正在同步..."
          mkdir -p "$OPENWRT_PATH/files"
          rsync -av --checksum files/ "$OPENWRT_PATH/files/"
      else
          echo "未找到自定义文件目录"
      fi
      echo "::endgroup::"

    # ======================
    # 执行自定义脚本
    # ======================
      echo "::group::🛠️ 执行自定义脚本"
      export REPO_BRANCH="${{ env.REPO_BRANCH }}"  # 显式传递变量
      export REPO_URL="${{ env.REPO_URL }}"
      export BUILD_DIR="$OPENWRT_PATH"  # 确保BUILD_DIR变量存在
    
      echo "▼▼▼ 调试信息 ▼▼▼"
      echo "当前分支: $REPO_BRANCH"
      echo "仓库地址: $REPO_URL"
      echo "构建目录: $BUILD_DIR"

    # 添加严格的错误处理
      set -euo pipefail
      chmod +x "$DIY_SCRIPT"
    
    # 执行脚本时传递参数
      /usr/bin/time -v bash -x "$DIY_SCRIPT" "$REPO_BRANCH" "$REPO_URL" "$BUILD_DIR"

      - name: Download DL Package(下载DL软件包)
        run: |
          echo "::group::📥 下载依赖包"
          cd "$OPENWRT_PATH"
          make -j8 download
          find dl -size -1k -delete
          echo "剩余有效包数：$(find dl -type f | wc -l)"
          echo "::endgroup::"

      - name: Compile Firmware(编译固件)
        timeout-minutes: 120
        run: |
          echo "::group::🔥 开始编译"
          cd "$OPENWRT_PATH"
          echo "使用线程数：$(($(nproc)+1))"
          make -j$(($(nproc)+1)) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "VERSION_INFO=$(git -C $OPENWRT_PATH log -1 --pretty='[%h] %s (%ad)')" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: Organize Files(整理文件)
        if: success()
        run: |
          echo "::group::📦 整理构建成果"
          cd "$OPENWRT_PATH/bin/targets"/*/*
          cp "$OPENWRT_PATH/.config" build.config
          mkdir -p packages && mv ../packages/*/*.ipk packages/ 2>/dev/null || true
          tar -zcf Packages.tar.gz packages
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: Upload Firmware To Artifact(上传测试版)
        if: env.FIRMWARE_RELEASE != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FIRMWARE_TAG }}-${{ env.DEVICE_TARGET }}-${{ env.DATE }}
          path: ${{ env.FIRMWARE_PATH }}

      - name: Upload Firmware To Release(发布固件)
        if: env.FIRMWARE_RELEASE == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.FIRMWARE_TAG }}-${{ env.DATE }}
          files: |
            ${{ env.FIRMWARE_PATH }}/*.bin
            ${{ env.FIRMWARE_PATH }}/Packages.tar.gz
            ${{ env.FIRMWARE_PATH }}/build.config
          body: |
            **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
            ### 📒 固件信息(无WIFI)
            - 内核版本：${{ env.VERSION_KERNEL }}
            - 编译日期：${{ env.DATE }}
            - 目标平台：${{ env.DEVICE_TARGET }} (${{ env.DEVICE_SUBTARGET }})
            - 源码分支：[${{ env.REPO_BRANCH }}](${{ env.REPO_URL }}/tree/${{ env.REPO_BRANCH }})
            
            ### 🔧 默认配置
            - 管理地址：192.168.1.1
            - 管理员密码：password
            
            ### 📋 版本记录
            ${{ env.VERSION_INFO }}
